# Utiliser le terminal et le shell Bash {#sec-terminalbash}

### Quoi ?

-   Un **terminal** permet d'écrire des commandes pour lancer des programmes de base pour gérer les fichiers de votre ordinateur.

-   Le **shell Bash** est le langage de programmation de ces commande, fonctionnant dans tous les systèmes d'exploitation classiques (Windows, Mac, Linux).

### Pourquoi ? Le contenu de ce chapitre a été rédigé selon les principes et bonnes pratiques enseignés dans les ateliers « Débugue tes humanités » de l'UdeM.

-   Pour avoir plus de contrôle sur ce que l'on peut faire avec les fichiers : les renommer en lot, créer des listes, lancer des sauvegardes des nouveaux fichiers, etc.

-   Pour gagner du temps de qualité :

    -   Pour construire des commandes adaptées à nos besoins, plus ou moins complexes, plus ou moins courantes.

    -   Pour lancer automatiquement des programmes et des traitements de fichiers de manières répétitives.

    -   Par exemple : « va dans tous les dossiers et sous-dossiers de tel emplacement, chaque fois que tu trouves un PDF lance un programme de reconnaissance de texte et créer à côté du fichier PDF un fichier texte de même nom contenant le résultat de la reconnaissance de texte. Si il existe déjà un fichier texte de même nom (sous entendu, une reconnaissance de texte à déjà été faite), alors ignore cette opération. Créé-moi au passage une liste de tous les fichiers texte créés ainsi et leurs emplacements. »

-   Pour faire plein de choses que l'interface graphique classique (boutons, souris, clics) des systèmes d'exploitation ne permet pas de faire habituellement.

### Comment installer le programme qui pilote le terminal ?

-   Windows :

    -   installer le « BASH natif » <https://blog.ineat-group.com/2020/02/utiliser-le-terminal-bash-natif-dans-windows-10/>

    -   ou installer Git BASH <https://gitforwindows.org/> ou <https://mintty.github.io/> qui est un peu moins complet que le BASH natif.

-   La syntaxe est presque la même pour tous les terminaux BASH et tous les systèmes d'exploitation (Windows, Mac, Linux).

### Comment utiliser le terminal ?

-   Quelques commandes de base :

    -   `pwd` : nom du chemin du dossier actuel.

    -   `ls` : liste les fichiers du dossier actuel.

    -   `clear` : efface le terminal.

    -   `mkdir NomDuDossier` : créé un dossier NomDuDossier.

    -   `cd NomDuDossier` : va dans le dossier nommé NomDuDossier.

        -   `cd .. `: remonte d'un niveau dans l'arborescence des dossiers.

    -   `history` : historique de toutes les commandes lancées.

    -   `mv` : déplace un fichier.

    -   `rm` : supprime un fichier.

        -   `rm -R` : supprime un dossier et tout ce qu'il contient.

    -   `cat` : affiche le contenu d'un fichier.

    -   `touch` : créé un fichier.

-   Astuces :

    -   tabulation = autocomplétion.

    -   flèche du haut = historique des commandes.

    -   CTRL+R : rechercher dans l'historique.

    -   Écrire une séquence de commandes dans un fichier texte nommé `prog.sh` puis exécuter ce fichier avec `bash prog.sh `

-   Autres commandes <https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh>.

### Attention : « avec de grands pouvoirs viennent de grandes responsabilités »

-   Il existe des commandes qui peuvent tout effacer sur votre ordinateur, ou tout renommer vos fichiers (y compris les fichiers de programmes) en toto.txt, ou tout autre manipulation en lot.

-   Il n'y a pas de fonction Annuler ou *undo*.

### Pour aller plus loin\...

-   Les ateliers « Débugue tes humanités » de l'UdeM : parcours en ligne, séminaires enregistrés, documentation en libre accès <https://debugue.ecrituresnumeriques.ca/>.

-   Cours en ligne « Maîtriser le shell Bash » par Fun MOOC <https://www.fun-mooc.fr/fr/cours/maitriser-le-shell-bash/>.


